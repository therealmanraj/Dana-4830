import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# 1) Load train_set and optionally slice from row 40900
train_set = pd.read_csv('Animated_Graphs/train_set.csv')
train_set = train_set[40900:]  # optional slice; remove if not needed
train_set.reset_index(drop=True, inplace=True)

# 2) Load test_set, reindex so it starts where train_set ends
test_set = pd.read_csv('Animated_Graphs/test_set.csv')
test_set = test_set[:1500]
test_set.reset_index(drop=True, inplace=True)
start_test_idx = len(train_set)
test_len = len(test_set)
test_set.index = range(start_test_idx, start_test_idx + test_len)

# 3) Create the figure and lines (4 total: train actual/pred, test actual/pred)
fig, ax = plt.subplots(figsize=(15, 5))

# Plot train lines statically (shown fully from the start)
line_train, = ax.plot(train_set.index, train_set['train'], label='Train (actual)', color='blue', linewidth=4)
line_train_pred, = ax.plot(train_set.index, train_set['train_pred'], label='Train (pred)', color='red', linestyle='--', linewidth=2)

# Create test line objects to be animated (start empty)
line_test, = ax.plot([], [], label='Test (actual)', color='green', linewidth=4)
line_test_pred, = ax.plot([], [], label='Test (pred)', color='orange', linestyle='--', linewidth=2)

# 4) init() function: set test lines to empty
def init():
    line_test.set_data([], [])
    line_test_pred.set_data([], [])
    return line_test, line_test_pred

# 5) animate(i): only update test lines
def animate(i):
    n_test = len(test_set)
    # Reveal test data gradually
    if i <= n_test:
        line_test.set_data(test_set.index[:i], test_set['test'][:i])
        line_test_pred.set_data(test_set.index[:i], test_set['test_pred'][:i])
    else:
        line_test.set_data(test_set.index, test_set['test'])
        line_test_pred.set_data(test_set.index, test_set['test_pred'])
    return line_test, line_test_pred

# 6) Create the FuncAnimation
frames_total = len(test_set) + 10  # extra frames for pause at the end
anim = animation.FuncAnimation(
    fig,
    animate,
    init_func=init,
    frames=frames_total,
    interval=50,  # adjust ms delay between frames as needed
    blit=True
)

# 7) Set axis limits
# X-axis spans from 0 to end of test_set index
x_min = 0
x_max = len(train_set) + len(test_set) - 1
ax.set_xlim(x_min, x_max)

# Y-axis: combine min and max from both train_set and test_set
y_min_train = train_set[['train','train_pred']].min().min()
y_max_train = train_set[['train','train_pred']].max().max()
y_min_test  = test_set[['test','test_pred']].min().min()
y_max_test  = test_set[['test','test_pred']].max().max()
y_min = min(y_min_train, y_min_test)
y_max = max(y_max_train, y_max_test)
ax.set_ylim(y_min, y_max)

# 8) Customize labels/titles as requested
ax.set_xlabel('')               # No x-axis label
ax.set_ylabel('Consumption')    # Y-axis label
ax.set_title('')                # No title
ax.legend()
ax.grid(True)

plt.show()
